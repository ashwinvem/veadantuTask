{"version":3,"sources":["store/index.js","reducers/index.js","actions/index.js","Components/Info/info.js","Components/Repo/Repo.js","Components/Filter/Filter.js","Components/Error/Error.js","Components/Profile/profile.js","Components/Search/search.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["store","createStore","state","action","type","repo","profile","search","userAction","user","Information","this","props","id","src","avatar_url","alt","className","name","login","bio","company","location","blog","email","Component","mapStateToProps","connect","Repo","repos","filter","languageFilter","language","typeFilter","toLowerCase","includes","input","map","key","node_id","href","html_url","description","forks","Date","updated_at","toDateString","Filter","onChangeHandler","e","searchInfo","target","value","setState","followers","following","repositories","public_repos","stars","overview","getProfileInfo","typeOptions","languages","forEach","push","languageOptions","dummyTabsList","list","onChange","placeholder","onClick","preventDefault","dispatch","Error","style","textAlign","margin","background","height","width","Profile","onProfileMount","Object","keys","length","to","userDoesntExist","withRouter","Search","onSubmit","onSubmitHandler","App","profileFound","username","fetch","then","response","ok","json","message","data","repoInfo","profileInfo","catch","err","console","log","bool","path","exact","render","repoInformation","profileData","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f0b0f0f1.chunk.js","sourcesContent":["import { createStore } from \"redux\";\r\nimport { reducer } from \"../reducers/index\";\r\n\r\n//create redux store\r\nexport const store = createStore(reducer)","export const reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"REPO\":\r\n        return { ...state, repo: action.repo };\r\n      case \"PROFILE\":\r\n        return { ...state, profile: action.profile };\r\n      case \"SEARCH\":\r\n        return { ...state, search: action.search };\r\n      default:\r\n        return state;\r\n    }\r\n  };","export const userAction = state => ({\r\n    user: state\r\n  });\r\n  \r\n  export const repoInformation = repo => ({\r\n    type: \"REPO\",\r\n    repo\r\n  });\r\n  export const profileData = profile => ({\r\n    type: \"PROFILE\",\r\n    profile\r\n  });\r\n  \r\n  export const searchInfo = search => ({\r\n    type: \"SEARCH\",\r\n    search\r\n  })","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { userAction } from \"../../actions/index\";\r\nimport \"./info.css\";\r\n\r\n// Info component, a functional/stateless component can be used\r\nclass Information extends Component {\r\n  render() {\r\n    const { profile } = this.props.user;\r\n    return (\r\n      <div id=\"info\">\r\n        <img src={profile.avatar_url} alt={profile.avatar_url} />\r\n        <h1>\r\n          <div className=\"name\">{profile.name}</div>\r\n          <div className=\"username\">{profile.login}</div>\r\n        </h1>\r\n\r\n        <br />\r\n        <div className=\"bio\">{profile.bio}</div>\r\n        <button className=\"btn\">Edit Bio</button>\r\n        <div className=\"company\">{profile.company}</div>\r\n        <div className=\"location\">{profile.location}</div>\r\n        <div className=\"blog\">{profile.blog}</div>\r\n        <div className=\"email\">{profile.email}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = userAction;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Information)","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { userAction } from \"../../actions/index\";\r\n\r\nimport \"./repo.css\";\r\n\r\nclass Repo extends Component {\r\n  render() {\r\n    //getting all the repos, also filtering from the queries sent by Search component\r\n    const repos = this.props.user.repo\r\n      .filter(repo => {\r\n        if (this.props.user.search) {\r\n          const languageFilter =\r\n            this.props.user.search.language === \"All\" ||\r\n            this.props.user.search.language === \"\"\r\n              ? true\r\n              : this.props.user.search.language === repo.language;\r\n          const typeFilter =\r\n            typeof repo[this.props.user.search.type] === \"undefined\"\r\n              ? true\r\n              : repo[this.props.user.search.type];\r\n          return (\r\n            repo.name\r\n              .toLowerCase()\r\n              .includes(this.props.user.search.input.toLowerCase()) &&\r\n            languageFilter &&\r\n            typeFilter\r\n          );\r\n        }\r\n        return true;\r\n      })\r\n      .map(repo => (\r\n        <div className=\"repo-container\" key={repo.node_id}>\r\n          <h2>\r\n            <a href={repo.html_url} className=\"repo-name\">\r\n              {repo.name}\r\n            </a>\r\n          </h2>\r\n          <div className=\"repo-description\">{repo.description}</div>\r\n          <div className=\"repo-meta\">\r\n            <div className=\"repo-language\">Language: {repo.language}</div>\r\n            <div className=\"repo-forks\">Forks: {repo.forks}</div>\r\n            <div className=\"repo-updated\">\r\n              Updated At: {new Date(repo.updated_at).toDateString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ));\r\n\r\n    return <div>{repos}</div>;\r\n  }\r\n}\r\nconst mapStateToProps = userAction;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Repo)","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { userAction, searchInfo } from \"../../actions/index\";\r\n\r\nimport \"./Filter.css\";\r\n\r\nclass Filter extends Component {\r\n  state = {\r\n    input: \"\",\r\n    type: \"\",\r\n    language: \"\"\r\n  };\r\n\r\n  // this method sends data to the Repo component, data to be filtered\r\n  onChangeHandler = e => {\r\n    this.props.searchInfo({ ...this.state, [e.target.id]: e.target.value });\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  // get meta data about profile to display in the dummy tabs\r\n  getProfileInfo() {\r\n    const { profile } = this.props.user;\r\n    const profileInfo = {\r\n      followers: profile.followers,\r\n      following: profile.following,\r\n      repositories: profile.public_repos,\r\n      stars: 7,\r\n      overview: \"\"\r\n    };\r\n    return profileInfo;\r\n  }\r\n\r\n  render() {\r\n    const profile = this.getProfileInfo();\r\n    //mapping the type options\r\n    const typeOptions = [\r\n      \"All\",\r\n      \"Public\",\r\n      \"Private\",\r\n      \"Source\",\r\n      \"Fork\",\r\n      \"Archived\",\r\n      \"Mirrors\"\r\n    ].map(type => (\r\n      <option value={type.toLowerCase()} key={type}>\r\n        {type}\r\n      </option>\r\n    ));\r\n\r\n    const languages = [\"All\"];\r\n\r\n    //getting all the languages from users repo and pushing it to languages array\r\n    this.props.user.repo.forEach(repo =>\r\n      languages.includes(repo.language)\r\n        ? null\r\n        : repo.language && languages.push(repo.language)\r\n    );\r\n\r\n    //map through and dynamically generate option\r\n    const languageOptions = languages.map(language => (\r\n      <option value={language} key={language}>\r\n        {language}\r\n      </option>\r\n    ));\r\n\r\n    // generating li's with a\r\n    const dummyTabsList = [\r\n      \"Overview\",\r\n      \"Repositories\",\r\n      \"Stars\",\r\n      \"Followers\",\r\n      \"Following\"\r\n    ].map(list => (\r\n      <li key={list}>\r\n        <a href=\"# \">\r\n          {list} <code>{profile[list.toLowerCase()]}</code>\r\n        </a>\r\n      </li>\r\n    ));\r\n    \r\n    return (\r\n      <>\r\n        <div className=\"dummy-tabs\">\r\n          <ul>{dummyTabsList}</ul>\r\n        </div>\r\n        <br />\r\n        <form id=\"filter-repo\" onChange={this.onChangeHandler}>\r\n          <label className=\"search-field\">\r\n            <input\r\n              className=\"input-field\"\r\n              type=\"text\"\r\n              id=\"input\"\r\n              placeholder=\"Find a repository...\"\r\n            />\r\n          </label>\r\n          <div className=\"select\">\r\n            <label className=\"language-type\">\r\n              Language:\r\n              <select name=\"\" id=\"language\">\r\n                {languageOptions}\r\n              </select>\r\n            </label>\r\n            <label className=\"select-type\">\r\n              Type:\r\n              <select name=\"\" id=\"type\">\r\n                {typeOptions}\r\n              </select>\r\n            </label>\r\n            <button className=\"btn\" onClick={e => e.preventDefault()}>\r\n              New\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = userAction;\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  searchInfo(search) {\r\n    return dispatch(searchInfo(search));\r\n  }\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Filter);","import React from \"react\";\r\n\r\n// renders error if the profile doesnt exist\r\nconst Error = () => {\r\n  const style = {\r\n    textAlign: \"center\",\r\n    margin: \"10px auto\",\r\n    background: \"lightblue\",\r\n    height: \"30px\",\r\n    width: \"300px\"\r\n  };\r\n  return <div style={style}>User doesn't exist</div>;\r\n};\r\nexport default Error","import React, { Component } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { userAction } from \"../../actions/index\";\r\nimport Info from \"../Info/info\";\r\nimport Repo from \"../Repo/Repo\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport Error from \"../Error/Error\";\r\nimport \"./profile.css\";\r\n\r\n// Profile component\r\nclass Profile extends Component {\r\n  componentDidMount() {\r\n    this.props.onProfileMount(false);\r\n  }\r\n  render() {\r\n    //Redirecting to the homepage if the user object is empty\r\n    return Object.keys(this.props.user).length === 0 ? (\r\n      <Redirect to=\"/\" />\r\n    ) : (\r\n      <>\r\n        {this.props.userDoesntExist && <Error />}\r\n        <div id=\"profile\">\r\n          <Info />\r\n          <div className=\"search-repo\">\r\n            <Filter />\r\n            <Repo />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// passing redux state as props to the component\r\nconst mapStateToProps = userAction;\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    null\r\n  )(Profile)\r\n);","import React from \"react\";\r\nimport \"./search.css\";\r\n\r\nconst Search = props => {\r\n  return (\r\n    <div>\r\n      <form id=\"profile-search\" onSubmit={e => props.onSubmitHandler(e)}>\r\n        <label>\r\n          <input\r\n            className=\"input-field\"\r\n            value={props.name}\r\n            onChange={e => props.onChangeHandler(e)}\r\n            placeholder=\"Search profile..\"\r\n          />\r\n        </label>\r\n        <button className=\"btn\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;","import React, { Component } from \"react\";\nimport { Route, Redirect, Switch, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Profile from \"../Profile/profile\";\nimport Search from \"../Search/search\";\nimport Error from \"../Error/Error\";\nimport { repoInformation, profileData } from \"../../actions/index\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    name: \"\",\n    profileFound: false,\n    userDoesntExist: false,\n    username: \"\"\n  };\n\n  //on submit handler which fetches data from API\n  onSubmitHandler = e => {\n    e.preventDefault();\n    fetch(`https://api.github.com/users/${this.state.name}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      })\n      .then(profile => {\n        if (profile.message !== \"Not Found\") {\n          fetch(`https://api.github.com/users/${this.state.name}/repos`)\n            .then(data => data.json())\n            .then(data => {\n              // storing the data in the redux store if the profile exists\n              this.props.repoInfo(data);\n              this.props.profileInfo(profile);\n\n              this.setState({\n                profileFound: true,\n                userDoesntExist: false,\n                username: profile.login\n              });\n            });\n        }\n      })\n      .catch(err => {\n        //If proflle not found then updating state and render Error component\n        console.log(\"Not found\");\n        this.setState({ userDoesntExist: true });\n      });\n  };\n\n  // onchange handler, which updates the local state\n  onChangeHandler = e => {\n    this.setState({\n      name: e.target.value\n    });\n  };\n\n  // method to revert the state so browser's \"back\" can work\n  onProfileMount = bool => {\n    this.setState({\n      profileFound: bool\n    });\n  };\n  render() {\n    return (\n      <>\n        <div id=\"App\">\n          <Switch>\n            {/* Redirecting from homepage to prifle route */}\n            <Route\n              path=\"/\"\n              exact\n              render={() =>\n                this.state.profileFound ? (\n                  <Redirect push to={`/profile/${this.state.username}`} />\n                ) : (\n                  <>\n                    <h1 id=\"heading\">Github Profile Viewer</h1>\n                    <Search\n                      onSubmitHandler={this.onSubmitHandler}\n                      onChangeHandler={this.onChangeHandler}\n                      name={this.state.name}\n                    />\n                    {/* Showing Error if the user doesnt exist  */}\n                    {this.state.userDoesntExist && <Error />}\n                  </>\n                )\n              }\n            />\n\n            {/* The profile/username route */}\n            <Route\n              path={`/profile/${this.state.username}`}\n              exact\n              render={() => (\n                <Profile\n                  userDoesntExist={this.state.userDoesntExist}\n                  onProfileMount={this.onProfileMount}\n                />\n              )}\n            />\n          </Switch>\n        </div>\n\n      </>\n    );\n  }\n}\n\n//dispatching actions to the app as props\nconst mapDispatchToProps = dispatch => ({\n  repoInfo(repo) {\n    return dispatch(repoInformation(repo));\n  },\n  profileInfo(profile) {\n    return dispatch(profileData(profile));\n  }\n});\n\nexport default withRouter(\n  connect(\n    null,\n    mapDispatchToProps\n  )(App)\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/index\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store = {store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}